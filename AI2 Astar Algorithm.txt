import heapq

def heuristic(node, goal):
    # Here, we can use the absolute difference between the ASCII values of the letters as the heuristic
    return abs(ord(node) - ord(goal))

def astar(graph, start, goal):
    # Priority queue to store nodes to explore
    pq = [(0, start)]  # (f-score, node)
    came_from = {}     # Parent dictionary to reconstruct the path
    g_score = {start: 0}  # Cost from start along the best known path
    f_score = {start: heuristic(start, goal)}  # Estimated total cost from start to goal

    while pq:
        current_f, current = heapq.heappop(pq)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]  # Return reversed path from start to goal

        for neighbor in graph[current]:
            tentative_g_score = g_score[current] + 1  # Assuming all edges have equal cost

            if tentative_g_score < g_score.get(neighbor, float('inf')):
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                heapq.heappush(pq, (f_score[neighbor], neighbor))

    return None  # No path found

# Example graph represented as a dictionary of adjacent nodes
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

start = 'A'
goal = 'F'

print("Shortest path from", start, "to", goal, ":", astar(graph, start, goal))

===Output===
Shortest path from A to F : ['A', 'C', 'F']